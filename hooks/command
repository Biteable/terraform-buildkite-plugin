#!/bin/bash

set -euo pipefail

#########
# SETUP #
#########

# Check for presence of required directories.
required_folders=(
  terraform
)

for dir in "${required_folders[@]}"; do
  if [[ -d $dir ]]; then
    echo "${dir} directory located."
  else
    echo "${dir} directory not found. Please make sure it is located in the project root. We looked in $(pwd)."
    exit 1
  fi
done

# We do this to cover cases where modules are stored in GitHub.
KNOWN_HOSTS_FILE=$(pwd)/known_hosts
if [ ! -f "$KNOWN_HOSTS_FILE" ]; then
    ssh-keyscan github.com >>$KNOWN_HOSTS_FILE
fi

function terraform-bin() {
  local DOCKER_IMAGE="${IMAGE_NAME}:${VERSION}"

  docker run --rm -it \
    -e SSH_AUTH_SOCK \
    -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
    --mount "type=bind,src=$PWD,dst=/svc" \
    --mount "type=bind,src=$KNOWN_HOSTS_FILE,dst=/root/.ssh/known_hosts" \
    -w /svc \
    $DOCKER_IMAGE \
    "${@}"
}

function terraform-run() {
  local APPLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY:-false}
  local APPLY_ONLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_ONLY:-false}
  local APPLY_MASTER=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_MASTER:-false}
  local BUILDKITE_BRANCH=${BUILDKITE_BRANCH:-}
  local IMAGE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_IMAGE:-"hashicorp/terraform"}
  local INIT_CONFIG=${BUILDKITE_PLUGIN_TERRAFORM_INIT_CONFIG}
  local USE_WORKSPACES=${BUILDKITE_PLUGIN_TERRAFORM_USE_WORKSPACES:-false}
  local VERSION=${BUILDKITE_PLUGIN_TERRAFORM_VERSION:-0.13.0}
  local WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE:-default}

  cd terraform

  if [[ "${APPLY_ONLY}" == false ]]; then
    echo "+++ :terraform: :hourglass: Setting up Terraform environment..."
    terraform-bin init ${INIT_CONFIG}
    echo ""
  fi

  if [[ "${USE_WORKSPACES}" == true ]]; then
    terraform-bin workspace select ${WORKSPACE}
    echo ""
  fi

  terraform-bin validate

  if [[ "${APPLY_ONLY}" == false ]]; then
    echo "+++ :terraform: :hourglass: Running Terraform plan..."
    if [[ "${USE_WORKSPACES}" == true ]]; then
      terraform-bin plan -input=false -out tfplan-${WORKSPACE} -var-file="${WORKSPACE}-terraform.tfvars"
      terraform-bin show -json tfplan-${WORKSPACE} > tfplan-${WORKSPACE}.json
    else
      terraform-bin plan -input=false -out tfplan
      terraform-bin show -json tfplan > tfplan.json
    fi
  fi

  if [[ "${APPLY}" == true || "${APPLY_ONLY}" == true || ("$APPLY_MASTER" == true && ${BUILDKITE_BRANCH} == "master") ]]; then
    "+++ :terraform: :hourglass: Running Terraform apply based on calculated plan..."
    if [[ "${USE_WORKSPACES}" == true ]]; then
      terraform-bin apply -input=false tfplan-${WORKSPACE}
    else
      terraform-bin apply -input=false tfplan
    fi
  fi
}

terraform-run

#!/bin/bash

set -euo pipefail

#########
# SETUP #
#########

# Check for presence of required directories.
required_folders=(
  terraform
)

for dir in "${required_folders[@]}"; do
  if [[ -d $dir ]]; then
    echo "${dir} directory located."
  else
    echo "${dir} directory not found. Please make sure it is located in the project root. We looked in $(pwd)."
    exit 1
  fi
done

# We do this to cover cases where modules are stored in GitHub.
# Without this, the container hangs forever waiting for confirmation.
KNOWN_HOSTS_FILE=$(pwd)/known_hosts

if [[ ! -f "$KNOWN_HOSTS_FILE" ]]; then
  ssh-keyscan github.com >> $KNOWN_HOSTS_FILE
fi

function terraform-bin() {
  local DOCKER_IMAGE="${IMAGE_NAME}:${VERSION}"

  docker run --rm -it \
    -e SSH_AUTH_SOCK \
    -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
    --mount "type=bind,src=$PWD,dst=/svc" \
    --mount "type=bind,src=$KNOWN_HOSTS_FILE,dst=/root/.ssh/known_hosts" \
    -w /svc \
    $DOCKER_IMAGE \
    "${@}"
}

function terraform-run() {
  local APPLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY:-false}
  local APPLY_ONLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_ONLY:-false}
  local APPLY_MASTER=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_MASTER:-false}
  local BUILDKITE_BRANCH=${BUILDKITE_BRANCH:-}
  local IMAGE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_IMAGE:-"hashicorp/terraform"}
  local INIT_CONFIG="${BUILDKITE_PLUGIN_TERRAFORM_INIT_CONFIG}"
  local NO_VALIDATE=${BUILDKITE_PLUGIN_TERRAFORM_NO_VALIDATE:-false}
  local USE_WORKSPACES=${BUILDKITE_PLUGIN_TERRAFORM_USE_WORKSPACES:-false}
  local SKIP_APPLY_NO_DIFF=${BUILDKITE_PLUGIN_TERRAFORM_SKIP_APPLY_NO_DIFF:-false}
  local VERSION=${BUILDKITE_PLUGIN_TERRAFORM_VERSION:-0.13.0}
  local WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE:-default}

  cd terraform

  echo "+++ :terraform: :buildkite: :hammer_and_wrench: Setting up Terraform environment..."
  terraform-bin init "${INIT_CONFIG[@]}"
  echo ""

  if [[ "${USE_WORKSPACES}" == true ]]; then
    terraform-bin workspace select ${WORKSPACE}
    echo ""
  fi

  if [[ "${NO_VALIDATE}" == false ]]; then
    terraform-bin validate
  fi

  if [[ "${APPLY_ONLY}" == false ]]; then
    echo "+++ :terraform: :buildkite: :hourglass: Running Terraform plan..."

    if [[ "${USE_WORKSPACES}" == true ]]; then
      terraform-bin plan -input=false -out tfplan -var-file="${WORKSPACE}-terraform.tfvars"
    else
      terraform-bin plan -input=false -out tfplan
    fi

    # Capture plan output for setting variables and passing as artifacts.
    terraform-bin show tfplan -no-color > tfplan.txt
    terraform-bin show -json tfplan > tfplan.json

    if grep -iFq "Plan: 0 to add, 0 to change, 0 to destroy." tfplan.txt; then
      echo ""
      echo "--- :terraform: :buildkite: :white_check_mark: Exporting tf_diff=false to agent metadata."
      buildkite-agent meta-data set "tf_diff" "false"
      export TF_DIFF=false
    else
      echo ""
      echo "--- :terraform: :buildkite: :white_check_mark: Exporting tf_diff=true to agent metadata."
      buildkite-agent meta-data set "tf_diff" "true"
      export TF_DIFF=true
    fi

    echo "--- :terraform: :buildkite: :floppy_disk: Listing directory contents for record keeping."
    ls -al .
  fi

  if [[ "${APPLY}" == true || "${APPLY_ONLY}" == true || ("${APPLY_MASTER}" == true && "${BUILDKITE_BRANCH}" == "master") ]]; then
    if [[ "${TF_DIFF}" == false && "${SKIP_APPLY_NO_DIFF}" == true ]]; then
      echo "--- :terraform: :buildkite: :zzz: Skipping apply step."
    else
      echo "+++ :terraform: :buildkite: :hourglass: Running Terraform apply based on calculated plan..."
      terraform-bin apply -input=false tfplan
    fi
  fi
}

terraform-run
